name: Secrets Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily scan at midnight

jobs:
  scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better scanning
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run secrets scan
      run: npm run scan:secrets:ci
      continue-on-error: true
    
    - name: Cleanup processes after scan
      if: always()
      run: |
        pkill -f "tsx.*secrets" || true
        pkill -f "node.*secrets" || true
    
    - name: Upload scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: secrets-scan-report
        path: secrets-report.json
        retention-days: 30
    
    - name: Check for critical secrets
      run: |
        if [ -f secrets-report.json ]; then
          CRITICAL_COUNT=$(grep -c '"severity":"critical"' secrets-report.json || echo "0")
          HIGH_COUNT=$(grep -c '"severity":"high"' secrets-report.json || echo "0")
          
          echo "::warning::Found $CRITICAL_COUNT critical and $HIGH_COUNT high severity secrets"
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "::error::Critical secrets detected! Please review the scan report."
            exit 1
          fi
        fi
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('secrets-report.json')) {
            const report = JSON.parse(fs.readFileSync('secrets-report.json', 'utf8'));
            const criticalCount = report.filter(f => f.severity === 'critical').length;
            const highCount = report.filter(f => f.severity === 'high').length;
            const mediumCount = report.filter(f => f.severity === 'medium').length;
            
            let comment = '## üîç Secrets Scan Results\n\n';
            
            if (report.length === 0) {
              comment += '‚úÖ **No secrets detected**\n';
            } else {
              comment += `‚ö†Ô∏è **${report.length} potential secrets detected**\n\n`;
              comment += '| Severity | Count |\n';
              comment += '|----------|-------|\n';
              comment += `| Critical | ${criticalCount} |\n`;
              comment += `| High | ${highCount} |\n`;
              comment += `| Medium | ${mediumCount} |\n`;
              
              if (criticalCount > 0) {
                comment += '\n‚ùå **Critical secrets found - PR will be blocked**\n';
                comment += 'Please remove all sensitive information before merging.\n';
              }
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }